Abstraction: 
Hiding the internal implementation of the 
feature and only showing the functionality to the 
users. Both abstract class and interface are used for abstraction.  

Ever since JDK 8 has allowed concrete (non-abstract)
methds on the interface like default and static methods.
Earlier, an interface can not have any concrete methods 
and that was the main difference between abstract class and interface but 
now that is not the case. 

An abstract class is a class and interface is an interface. 

A class can have a state which can be modified by non 
abstract methods but an interface can not have the state because they 
can not have instance variables. 

Interface can not have a constructor. 
Abstract class can also have constructor. 

Abstract class can have abstract and non abstract methods. 
Interface can oly have abstract and static/default methods. 

Variables declared in Java interface are by default final. 
Abstract class may contain non-final variables. 

Abstract class can provider the implementation of interface. 
Interface can not provider the implementation of abstract class. 

An interface can extend another Java interface only, an abstract 
class can extend another Java class and implement multiple Java interfaces.


Coding to an interface, rather than to an implementation, 
makes your software easier to extend. 
By coding to an interface, you code wil work with all of the 
interface's subclass-even ones that have not been created yet. 


Encapsulation can prevent 
-- duplicate code 
-- protect classes from unnecessary changes 
-- try to encapsulate what varies 

OO principles: 
-- Encapsulate what varies 
-- Code to an interface rather than to an implementation. 
-- Each class in your application should have only one reason to change. 
-- Classes are about behavior and functionality.
-- Classes should be open for extension, but closed for modification 
-- Avoid duplicate code by abstracting out things that are common and 
   placing them in a single location (DRY)
-- Every object in your system should have a single responsibility, and 
   all the object's services should be focused on carrying out that single 
   responsibility. (SRP)
-- Suclasses should be substitutable for their base class 
   (LSP)

Classes are really about behavior. 

Separating what changes from what stays the same. 
If subclass is just about properties but not behavior, then 
it is not worth creating subclasses. 

By encapsulating what varies, you make your application more 
flexible, and easier to change. 

Most good designs come from analysis of bad designs. 

Never be afraid to make mistakes and then change 
things around. 

A Cohesive class does one thng really well and 
does not try to do or be something else. 

Every class should attempt to make sure that it 
has only one reason to this, the death of many a 
badly designed piece of software. 

Cohesion is really just a measure of how closely 
related the functionality of the classes in an application 
are. If one class is make up of functionality that's al related, 
then it has only one reason to change. 


The best way to look at a big problem is to see it as 
lots of individual pieces of functionality. 

You can solve a big problem by breaking it into 
lots of functional pieces, and then working on each of those 
pireces individually. 


Use cases helps you when you are working on 
big projects. 

Design Pattern does not go to the code, it goes to 
your code. 

For most of the game, we can use M-V-C pattern. 

Architecture is your design structure, and highlights the 
most important parts of your app, and the relationships between 
those parts. 

Three Qs for architecture:
1. Is it part of the essence of the system ?
2. What the heck does it mean ?
3. How the heck do I do it ?


OO Principles: 

1. The Open-Closed Principle: 
    Classes should be open for extension and closed 
    for modification. 
2. Don't repeat yourself:
    Avoid duplicate code by abstracting out things that are 
    common and placing those things in a single location. 
    DRY is about having each piece of information and behavior in 
    your system in a single, sensible place. 
3. The single responsibility: 
    The SR is all about responsibilities and which objects in your 
    system do what. You want each object that you design to have just 
    one responsibility to focus on. 
    One way to find multiple responsibilities is to ask questions about 
    all of the methods in the class. 
4. Liskov Substitution Principle: 
    Subtypes must be substitutable for their base types. 
    When you inherit from a base class, you must be able to substitute your subclass 
    for that base class without things going terribly wrong. 

    What to do is using inheritance violates the LSP Principle: 
    try using delegation rather 


When to use Delegation: 
    Delegation is best used when you want to use another class's functionality as it, 
    without changing that behavior at all. 

Use composition to assemble behaviors from other classes: 
    Sometimes delegation is not quite what you need; in delegation, the 
    behavior of the object you are delegating to never changes. 
    But in some cases, you need to have more than one single behavior to choose from. 
    For example, suppose we wanted to develop a Weapon interface, and then create several 
    implementations of that interface that all behave differently. 

    Composition is most powerful when you want to use behavior defined in an interface, 
    and then choose from a variety of implementations of that interface, at both compile 
    time and run time. 
    In composition, the object composed of other behaviors owns those 
    behaviors. When the object is destroyed, so are all of its behaviors. 
    The behaviors in a composition do not exist outside of the composition itself. 


Aggregation: Composition, without the abrupt ending: 
    is when one class is used as part of another class, but 
    still exists outside of that other class. 

Aggregation VS Composition: 
    Does the object whose behavior I want to use exist outside of the object 
    that uses its behavior?
    If the object does make sense existing on its own, then you should use 
    aggregation; if not, then go with composition. 

--------------------------------------------------------
IF YOU FAVOR DELEGATION, COMPOSITION, AND AGGREGATION OVER 
INHERITANCE, YOUR SOFTWARE WILL USUALLY BE MORE FLEXIBLE, AND EASIER 
TO MAINTAIN, EXTEND, AND REUSE. 
This way you will not have violate LSP principle.
---------------------------------------------------------
























JAVA IN VSCODE: 

Install VSCode
Install JAVA Extension Pack 

Ctrl+Shfit+p [Command Paletter] and type "Java: Getting Started"
In addition to creating a project through Maven archetype, you can also 
use the following command to create a sample Java project: 
"Java: Create Java Project" from Command Palette. 




